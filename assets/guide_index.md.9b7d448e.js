import{o as e,c as t,a}from"./app.a2203fca.js";const n='{"title":"开始","description":"","frontmatter":{"title":"开始"},"headers":[{"level":2,"title":"总览","slug":"overview"},{"level":2,"title":"浏览器支持","slug":"browser-support"},{"level":2,"title":"搭建第一个 Vite 项目","slug":"scaffolding-your-first-vite-project"},{"level":2,"title":"社区模板","slug":"community-templates"},{"level":2,"title":"index.html 与项目根目录","slug":"index-html-and-project-root"},{"level":2,"title":"命令行界面","slug":"command-line-interface"},{"level":2,"title":"使用未发布的功能","slug":"using-unreleased-commits"},{"level":2,"title":"社区","slug":"community"}],"relativePath":"guide/index.md","lastUpdated":1631082445885}',s={},o=a('<h1 id="getting-started"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> 开始</h1><h2 id="overview"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> 总览</h2><p>Vite (法语意为 &quot;快速的&quot;，发音 <code>/vit/</code>) 是一种新型前端构建工具，能够显著提升前端开发体验。它主要由两部分组成：</p><ul><li><p>一个开发服务器，它基于 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noopener noreferrer">原生 ES 模块</a> 提供了 <a href="./features.html">丰富的内建功能</a>，如速度快到惊人的 <a href="./features.html#hot-module-replacement">模块热更新（HMR）</a>。</p></li><li><p>一套构建指令，它使用 <a href="https://rollupjs.org" target="_blank" rel="noopener noreferrer">Rollup</a> 打包你的代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源。</p></li></ul><p>Vite 意在提供开箱即用的配置，同时它的 <a href="./api-plugin.html">插件 API</a> 和 <a href="./api-javascript.html">JavaScript API</a> 带来了高度的可扩展性，并有完整的类型支持。</p><p>你可以在 <a href="./why.html">为什么选 Vite</a> 中了解更多关于项目的设计初衷。</p><h2 id="browser-support"><a class="header-anchor" href="#browser-support" aria-hidden="true">#</a> 浏览器支持</h2><ul><li>默认的构建目标浏览器是能 <a href="https://caniuse.com/es6-module" target="_blank" rel="noopener noreferrer">在 script 标签上支持原生 ESM</a> 和 <a href="https://caniuse.com/es6-module-dynamic-import" target="_blank" rel="noopener noreferrer">原生 ESM 动态导入</a>。传统浏览器可以通过官方插件 <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-legacy" target="_blank" rel="noopener noreferrer">@vitejs/plugin-legacy</a> 支持 —— 查看 <a href="./build.html">构建生产版本</a> 章节获取更多细节。</li></ul><h2 id="scaffolding-your-first-vite-project"><a class="header-anchor" href="#scaffolding-your-first-vite-project" aria-hidden="true">#</a> 搭建第一个 Vite 项目</h2><div class="tip custom-block"><p class="custom-block-title">兼容性注意</p><p>Vite 需要 <a href="https://nodejs.org/en/" target="_blank" rel="noopener noreferrer">Node.js</a> 版本 &gt;= 12.0.0。</p></div><p>使用 NPM:</p><div class="language-bash"><pre><code>$ <span class="token function">npm</span> init vite@latest\n</code></pre></div><p>使用 Yarn:</p><div class="language-bash"><pre><code>$ <span class="token function">yarn</span> create vite\n</code></pre></div><p>使用 PNPM:</p><div class="language-bash"><pre><code>$ pnpx create-vite\n</code></pre></div><p>然后按照提示操作即可！</p><p>你还可以通过附加的命令行选项直接指定项目名称和你想要使用的模板。例如，要构建一个 Vite + Vue 项目，运行:</p><div class="language-bash"><pre><code><span class="token comment"># npm 6.x</span>\n<span class="token function">npm</span> init vite@latest my-vue-app --template vue\n\n<span class="token comment"># npm 7+, 需要额外的双横线：</span>\n<span class="token function">npm</span> init vite@latest my-vue-app -- --template vue\n\n<span class="token comment"># yarn</span>\n<span class="token function">yarn</span> create vite my-vue-app --template vue\n</code></pre></div><p>支持的模板预设包括：</p><ul><li><code>vanilla</code></li><li><code>vanilla-ts</code></li><li><code>vue</code></li><li><code>vue-ts</code></li><li><code>react</code></li><li><code>react-ts</code></li><li><code>preact</code></li><li><code>preact-ts</code></li><li><code>lit-element</code></li><li><code>lit-element-ts</code></li><li><code>svelte</code></li><li><code>svelte-ts</code></li></ul><p>查看 <a href="https://github.com/vitejs/vite/tree/main/packages/create-vite" target="_blank" rel="noopener noreferrer">create-vite</a> 以获取每个模板的更多细节。</p><h2 id="community-templates"><a class="header-anchor" href="#community-templates" aria-hidden="true">#</a> 社区模板</h2><p>create-vite 是一个快速生成主流框架基础模板的工具。查看 Awesome Vite 仓库的 <a href="https://github.com/vitejs/awesome-vite#templates" target="_blank" rel="noopener noreferrer">社区维护模板</a>，里面包含各种工具和不同框架的模板。你可以用如 <a href="https://github.com/Rich-Harris/degit" target="_blank" rel="noopener noreferrer">degit</a> 之类的工具，使用社区模版来搭建项目。</p><div class="language-bash"><pre><code>npx degit user/project my-project\n<span class="token builtin class-name">cd</span> my-project\n\n<span class="token function">npm</span> <span class="token function">install</span>\n<span class="token function">npm</span> run dev\n</code></pre></div><p>如果该项目使用 <code>main</code> 作为默认分支, 需要在项目名后添加 <code>#main</code>。</p><div class="language-bash"><pre><code>npx degit user/project<span class="token comment">#main my-project</span>\n</code></pre></div><h2 id="index-html-and-project-root"><a class="header-anchor" href="#index-html-and-project-root" aria-hidden="true">#</a> <code>index.html</code>与项目根目录</h2><p>你可能已经注意到，在一个 Vite 项目中，<code>index.html</code> 在项目最外层而不是在 <code>public</code> 文件夹内。这是有意而为之的：在开发期间 Vite 是一个服务器，而 <code>index.html</code> 是该 Vite 项目的入口文件。</p><p>Vite 将 <code>index.html</code> 视为源码和模块图的一部分。Vite 解析 <code>&lt;script type=&quot;module&quot; src=&quot;...&quot;&gt;</code> ，这个标签指向你的 JavaScript 源码。甚至内联引入 JavaScript 的 <code>&lt;script type=&quot;module&quot;&gt;</code> 和引用 CSS 的 <code>&lt;link href&gt;</code> 也能利用 Vite 特有的功能被解析。另外，<code>index.html</code> 中的 URL 将被自动转换，因此不再需要 <code>%PUBLIC_URL%</code> 占位符了。</p><p>与静态 HTTP 服务器类似，Vite 也有 “根目录” 的概念，即服务文件的位置，在接下来的文档中你将看到它会以 <code>&lt;root&gt;</code> 代称。源码中的绝对 URL 路径将以项目的 “根” 作为基础来解析，因此你可以像在普通的静态文件服务器上一样编写代码（并且功能更强大！）。Vite 还能够处理依赖关系，解析处于根目录外的文件位置，这使得它即使在基于 monorepo 的方案中也十分有用。</p><p>Vite 也支持多个 <code>.html</code> 作入口点的 <a href="./build.html#multi-page-app">多页面应用模式</a>。</p><h4 id="specifying-alternative-root"><a class="header-anchor" href="#specifying-alternative-root" aria-hidden="true">#</a> 指定替代根目录</h4><p><code>vite</code> 以当前工作目录作为根目录启动开发服务器。你也可以通过 <code>vite serve some/sub/dir</code> 来指定一个替代的根目录。</p><h2 id="command-line-interface"><a class="header-anchor" href="#command-line-interface" aria-hidden="true">#</a> 命令行界面</h2><p>在安装了 Vite 的项目中，可以在 npm scripts 中使用 <code>vite</code> 可执行文件，或者直接使用 <code>npx vite</code> 运行它。下面是通过脚手架创建的 Vite 项目中默认的 npm scripts：</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 启动开发服务器</span>\n    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 为生产环境构建产物</span>\n    <span class="token property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite preview&quot;</span> <span class="token comment">// 本地预览生产构建产物</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>可以指定额外的命令行选项，如 <code>--port</code> 或 <code>--https</code>。运行 <code>npx vite --help</code> 获得完整的命令行选项列表。</p><h2 id="using-unreleased-commits"><a class="header-anchor" href="#using-unreleased-commits" aria-hidden="true">#</a> 使用未发布的功能</h2><p>如果你迫不及待想要体验最新的功能，可以自行克隆 <a href="https://github.com/vitejs/vite" target="_blank" rel="noopener noreferrer">vite 仓库</a> 到本地机器上然后自行将其链接（将需要 <a href="https://classic.yarnpkg.com/lang/en/" target="_blank" rel="noopener noreferrer">Yarn 1.x</a>）：</p><div class="language-bash"><pre><code><span class="token function">git</span> clone https://github.com/vitejs/vite.git\n<span class="token builtin class-name">cd</span> vite\n<span class="token function">yarn</span>\n<span class="token builtin class-name">cd</span> packages/vite\n<span class="token function">yarn</span> build\n<span class="token function">yarn</span> <span class="token function">link</span>\n</code></pre></div><p>然后，回到你的 vite 项目并运行 <code>yarn link vite</code>。重新启动开发服务器（<code>yarn dev</code>）来体验新功能吧！</p><h2 id="community"><a class="header-anchor" href="#community" aria-hidden="true">#</a> 社区</h2><p>如果你有疑问或者需要帮助，可以到 <a href="https://discord.gg/4cmKdMfpU5" target="_blank" rel="noopener noreferrer">Discord</a> 和 <a href="https://github.com/vitejs/vite/discussions" target="_blank" rel="noopener noreferrer">GitHub Discussions</a> 社区来寻求帮助。</p>',44);s.render=function(a,n,s,r,i,p){return e(),t("div",null,[o])};export default s;export{n as __pageData};
