import{o as n,c as a,a as s}from"./app.a2203fca.js";const e='{"title":"从 v1 迁移","description":"","frontmatter":{"title":"从 v1 迁移"},"headers":[{"level":2,"title":"配置项变化","slug":"config-options-change"},{"level":2,"title":"别名用法变化","slug":"alias-behavior-change"},{"level":2,"title":"Vue Support","slug":"vue-support"},{"level":3,"title":"自定义块转换","slug":"custom-blocks-transforms"},{"level":2,"title":"React 支持","slug":"react-support"},{"level":2,"title":"HMR API 变化","slug":"hmr-api-change"},{"level":2,"title":"Manifest 格式变化","slug":"manifest-format-change"},{"level":2,"title":"致插件作者","slug":"for-plugin-authors"}],"relativePath":"guide/migration.md","lastUpdated":1627354936992}',t={},o=s('<h1 id="migration-from-v1"><a class="header-anchor" href="#migration-from-v1" aria-hidden="true">#</a> 从 v1 迁移</h1><h2 id="config-options-change"><a class="header-anchor" href="#config-options-change" aria-hidden="true">#</a> 配置项变化</h2><ul><li><p>以下选项已被删除，应通过 <a href="./api-plugin.html">插件</a> 实现：</p><ul><li><code>resolvers</code></li><li><code>transforms</code></li><li><code>indexHtmlTransforms</code></li></ul></li><li><p><code>jsx</code> 和 <code>enableEsbuild</code> 都已被删除，请使用新的 <a href="/config/#esbuild"><code>esbuild</code></a> 选项。</p></li><li><p><a href="/config/#css-modules">CSS 相关选项</a> 都包含在 <code>css</code> 字段下。</p></li><li><p>所有 <a href="/config/#build-options">用于构建的选项</a> 都包含在 <code>build</code> 字段下。</p><ul><li><code>rollupInputOptions</code> 和 <code>rollupOutputOptions</code> 已经被 <a href="/config/#build-rollupoptions"><code>build.rollupOptions</code></a> 替代。</li><li><code>esbuildTarget</code> 变更为 <a href="/config/#build-target"><code>build.target</code></a></li><li><code>emitManifest</code> 变更为 <a href="/config/#build-manifest"><code>build.manifest</code></a></li><li>以下构建选项已经被移除，因为它们可以通过插件钩子或其他选项实现： <ul><li><code>entry</code></li><li><code>rollupDedupe</code></li><li><code>emitAssets</code></li><li><code>emitIndex</code></li><li><code>shouldPreload</code></li><li><code>configureBuild</code></li></ul></li></ul></li><li><p>所有的 <a href="/config/#server-options">server-specific options</a> 都包含在 <code>server</code> 字段下。</p><ul><li><code>hostname</code> 变更为 <a href="/config/#server-host"><code>server.host</code></a>。</li><li><code>httpsOptions</code> 已被删除，<a href="/config/#server-https"><code>server.https</code></a> 可以直接接收选项对象。</li><li><code>chokidarWatchOptions</code> 变更为 <a href="/config/#server-watch"><code>server.watch</code></a>。</li></ul></li><li><p><a href="/config/#assetsInclude"><code>assetsInclude</code></a> 现在接收 <code>string | RegExp | (string | RegExp)[]</code> 而不是一个函数。</p></li><li><p>所有 Vue 特定选项都已移除；应将选项传递给 Vue 插件。</p></li></ul><h2 id="alias-behavior-change"><a class="header-anchor" href="#alias-behavior-change" aria-hidden="true">#</a> 别名用法变化</h2><p><a href="/config/#alias"><code>alias</code></a> 现在会被传递给 <code>@rollup/plugin-alias</code> 并不再需要开始/结尾处的斜线了。此行为目前是一个直接替换，所以 1.0 风格的目录别名需要删除其结尾处的斜线：</p><div class="language-diff"><pre><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> alias: { &#39;/@foo/&#39;: path.resolve(__dirname, &#39;some-special-dir&#39;) }\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> alias: { &#39;/@foo&#39;: path.resolve(__dirname, &#39;some-special-dir&#39;) }\n</span></span></code></pre></div><p>另外，你可以对该选项使用 <code>[{ find: RegExp, replacement: string }]</code> 格式以求更精确的控制。</p><h2 id="vue-support"><a class="header-anchor" href="#vue-support" aria-hidden="true">#</a> Vue Support</h2><p>Vite 2.0 核心已经是框架无关的了。对 Vue 的支持目前详见 <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-vue" target="_blank" rel="noopener noreferrer"><code>@vitejs/plugin-vue</code></a>。安装它并添加到 Vite 配置十分简单:</p><div class="language-js"><pre><code><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-vue&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="custom-blocks-transforms"><a class="header-anchor" href="#custom-blocks-transforms" aria-hidden="true">#</a> 自定义块转换</h3><p>一个自定义插件可以用来转换 Vue 自定义块，如下所示:</p><div class="language-ts"><pre><code><span class="token comment">// vite.config.js</span>\n<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-vue&#39;</span>\n\n<span class="token keyword">const</span> vueI18nPlugin <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;vue-i18n&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">transform</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">vue&amp;type=i18n</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.ya?ml$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      code <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;js-yaml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">safeLoad</span><span class="token punctuation">(</span>code<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">export default Comp =&gt; {\n      Comp.i18n = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n    }</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vueI18nPlugin<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="react-support"><a class="header-anchor" href="#react-support" aria-hidden="true">#</a> React 支持</h2><p>现已支持 React Fast Refresh，详见 <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-react-refresh" target="_blank" rel="noopener noreferrer"><code>@vitejs/plugin-react-refresh</code></a>。</p><h2 id="hmr-api-change"><a class="header-anchor" href="#hmr-api-change" aria-hidden="true">#</a> HMR API 变化</h2><p><code>import.<wbr>meta.hot.acceptDeps()</code> 已经弃用。<a href="./api-hmr.html#hot-accept-deps-cb"><code>import.<wbr>meta.hot.accept()</code></a> 现在可以接收一个或多个依赖。</p><h2 id="manifest-format-change"><a class="header-anchor" href="#manifest-format-change" aria-hidden="true">#</a> Manifest 格式变化</h2><p>构建清单现在使用以下格式:</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;index.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/index.acaf2b48.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;imports&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>...<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;index.css&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/index.7b7dbd85.css&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;asset.png&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/asset.0ab0f9cd.png&quot;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>对于入口 JS chunk，它还列出了它导入的 chunk，这些 chunk 可以用来渲染预加载指令。</p><h2 id="for-plugin-authors"><a class="header-anchor" href="#for-plugin-authors" aria-hidden="true">#</a> 致插件作者</h2><p>Vite 2 使用了一套完全重定义的，扩展了 Rollup 插件的接口。请阅读新的 <a href="./api-plugin.html">插件开发指南</a>.</p><p>一些将 v1 插件迁移到 v2 的提示:</p><ul><li><code>resolvers</code> -&gt; 使用 <a href="https://rollupjs.org/guide/en/#resolveid" target="_blank" rel="noopener noreferrer"><code>resolveId</code></a> 钩子</li><li><code>transforms</code> -&gt; 使用 <a href="https://rollupjs.org/guide/en/#transform" target="_blank" rel="noopener noreferrer"><code>transform</code></a> 钩子</li><li><code>indexHtmlTransforms</code> -&gt; 使用 <a href="./api-plugin.html#transformindexhtml"><code>transformIndexHtml</code></a> 钩子</li><li>虚拟文件支持 -&gt; 使用 <a href="https://rollupjs.org/guide/en/#resolveid" target="_blank" rel="noopener noreferrer"><code>resolveId</code></a> + <a href="https://rollupjs.org/guide/en/#load" target="_blank" rel="noopener noreferrer"><code>load</code></a> 钩子</li><li>添加 <code>alias</code>，<code>define</code> 或其他配置项 -&gt; 使用 <a href="./api-plugin.html#config"><code>config</code></a> 钩子</li></ul><p>由于大多数逻辑应通过插件钩子实现，而无需使用中间件，因此对中间件的需求大大减少。内部服务器应用现在看起来像旧版的 <a href="https://github.com/senchalabs/connect" target="_blank" rel="noopener noreferrer">connect</a> 实例，而不是 Koa。</p>',26);t.render=function(s,e,t,p,c,l){return n(),a("div",null,[o])};export default t;export{e as __pageData};
