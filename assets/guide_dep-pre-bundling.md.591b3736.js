import{o as e,c as o,a as d}from"./app.a2203fca.js";const a='{"title":"依赖预构建","description":"","frontmatter":{"title":"依赖预构建"},"headers":[{"level":2,"title":"原因","slug":"the-why"},{"level":2,"title":"自动依赖搜寻","slug":"automatic-dependency-discovery"},{"level":2,"title":"Monorepo 和链接依赖","slug":"monorepos-and-linked-dependencies"},{"level":2,"title":"自定义行为","slug":"customizing-the-behavior"},{"level":2,"title":"缓存","slug":"caching"},{"level":3,"title":"文件系统缓存","slug":"file-system-cache"},{"level":3,"title":"浏览器缓存","slug":"browser-cache"}],"relativePath":"guide/dep-pre-bundling.md","lastUpdated":1631082445885}',c={},i=d('<h1 id="dependency-pre-bundling"><a class="header-anchor" href="#dependency-pre-bundling" aria-hidden="true">#</a> 依赖预构建</h1><p>当你首次启动 <code>vite</code> 时，你可能会注意到打印出了以下信息：</p><div class="language-"><pre><code>Optimizable dependencies detected: （侦测到可优化的依赖：）\nreact, react-dom\nPre-bundling them to speed up dev server page load...（将预构建它们以提升开发服务器页面加载速度）\n(this will be run only when your dependencies have changed)（这将只会在你的依赖发生变化时执行）\n</code></pre></div><h2 id="the-why"><a class="header-anchor" href="#the-why" aria-hidden="true">#</a> 原因</h2><p>这就是 Vite 执行的所谓的“依赖预构建”。这个过程有两个目的:</p><ol><li><p><strong>CommonJS 和 UMD 兼容性:</strong> 开发阶段中，Vite 的开发服务器将所有代码视为原生 ES 模块。因此，Vite 必须先将作为 CommonJS 或 UMD 发布的依赖项转换为 ESM。</p><p>当转换 CommonJS 依赖时，Vite 会执行智能导入分析，这样即使导出是动态分配的（如 React），按名导入也会符合预期效果：</p><div class="language-js"><pre><code><span class="token comment">// 符合预期</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n</code></pre></div></li><li><p><strong>性能：</strong> Vite 将有许多内部模块的 ESM 依赖关系转换为单个模块，以提高后续页面加载性能。</p><p>一些包将它们的 ES 模块构建作为许多单独的文件相互导入。例如，<a href="https://unpkg.com/browse/lodash-es/" target="_blank" rel="noopener noreferrer"><code>lodash-es</code> 有超过 600 个内置模块</a>！当我们执行 <code>import { debounce } from &#39;lodash-es&#39;</code> 时，浏览器同时发出 600 多个 HTTP 请求！尽管服务器在处理这些请求时没有问题，但大量的请求会在浏览器端造成网络拥塞，导致页面的加载速度相当慢。</p><p>通过预构建 <code>lodash-es</code> 成为一个模块，我们就只需要一个 HTTP 请求了！</p></li></ol><h2 id="automatic-dependency-discovery"><a class="header-anchor" href="#automatic-dependency-discovery" aria-hidden="true">#</a> 自动依赖搜寻</h2><p>如果没有找到相应的缓存，Vite 将抓取你的源码，并自动寻找引入的依赖项（即 &quot;bare import&quot;，表示期望从 <code>node_modules</code> 解析），并将这些依赖项作为预构建包的入口点。预构建通过 <code>esbuild</code> 执行，所以它通常非常快。</p><p>在服务器已经启动之后，如果遇到一个新的依赖关系导入，而这个依赖关系还没有在缓存中，Vite 将重新运行依赖构建进程并重新加载页面。</p><h2 id="monorepos-and-linked-dependencies"><a class="header-anchor" href="#monorepos-and-linked-dependencies" aria-hidden="true">#</a> Monorepo 和链接依赖</h2><p>在一个 monorepo 启动中，该仓库中的某个依赖可能会成为另一个包的依赖。Vite 会自动侦测没有从 <code>node_modules</code> 解析的依赖项，并将链接的依赖视为源码。它不会尝试打包被链接的依赖，而是会分析被链接依赖的依赖列表。</p><h2 id="customizing-the-behavior"><a class="header-anchor" href="#customizing-the-behavior" aria-hidden="true">#</a> 自定义行为</h2><p>默认的依赖项发现为启发式可能并不总是可取的。在你想要显式地从列表中包含/排除依赖项的情况下, 请使用 <a href="/config/#dep-optimization-options"><code>optimizeDeps</code> 配置项</a>。</p><p>当你遇到不能直接在源码中发现的 import 时，<code>optimizeDeps.include</code> 或 <code>optimizeDeps.exclude</code> 就是典型的用例。例如，import 可能是插件转换的结果。这意味着 Vite 无法在初始扫描时发现 import —— 它只能在浏览器请求文件时转换后才能发现。这将导致服务器在启动后立即重新打包。</p><p><code>include</code> 和 <code>exclude</code> 都可以用来处理这个问题。如果依赖项很大（包含很多内部模块）或者是 CommonJS，那么你应该包含它；如果依赖项很小，并且已经是有效的 ESM，则可以排除它，让浏览器直接加载它。</p><h2 id="caching"><a class="header-anchor" href="#caching" aria-hidden="true">#</a> 缓存</h2><h3 id="file-system-cache"><a class="header-anchor" href="#file-system-cache" aria-hidden="true">#</a> 文件系统缓存</h3><p>Vite 会将预构建的依赖缓存到 <code>node_modules/.vite</code>。它根据几个源来决定是否需要重新运行预构建步骤:</p><ul><li><code>package.json</code> 中的 <code>dependencies</code> 列表</li><li>包管理器的 lockfile，例如 <code>package-lock.json</code>, <code>yarn.lock</code>，或者 <code>pnpm-lock.yaml</code></li><li>可能在 <code>vite.config.js</code> 相关字段中配置过的</li></ul><p>只有在上述其中一项发生更改时，才需要重新运行预构建。</p><p>如果出于某些原因，你想要强制 Vite 重新构建依赖，你可以用 <code>--force</code> 命令行选项启动开发服务器，或者手动删除 <code>node_modules/.vite</code> 目录。</p><h3 id="browser-cache"><a class="header-anchor" href="#browser-cache" aria-hidden="true">#</a> 浏览器缓存</h3><p>解析后的依赖请求会以 HTTP 头 <code>max-age=31536000,immutable</code> 强缓存，以提高在开发时的页面重载性能。一旦被缓存，这些请求将永远不会再到达开发服务器。如果安装了不同的版本（这反映在包管理器的 lockfile 中），则附加的版本 query 会自动使它们失效。如果你想通过本地编辑来调试依赖项，你可以:</p><ol><li>通过浏览器调试工具的 Network 选项卡暂时禁用缓存；</li><li>重启 Vite dev server，并添加 <code>--force</code> 命令以重新构建依赖；</li><li>重新载入页面。</li></ol>',24);c.render=function(d,a,c,n,t,s){return e(),o("div",null,[i])};export default c;export{a as __pageData};
