import{o as n,c as s,a}from"./app.a2203fca.js";const p='{"title":"插件 API","description":"","frontmatter":{"title":"插件 API"},"headers":[{"level":2,"title":"约定","slug":"conventions"},{"level":2,"title":"插件配置","slug":"plugins-config"},{"level":2,"title":"简单示例","slug":"simple-examples"},{"level":3,"title":"引入一个虚拟文件","slug":"importing-a-virtual-file"},{"level":3,"title":"转换自定义文件类型","slug":"transforming-custom-file-types"},{"level":2,"title":"通用钩子","slug":"universal-hooks"},{"level":2,"title":"Vite 独有钩子","slug":"vite-specific-hooks"},{"level":3,"title":"config","slug":"config"},{"level":3,"title":"configResolved","slug":"configresolved"},{"level":3,"title":"configureServer","slug":"configureserver"},{"level":3,"title":"transformIndexHtml","slug":"transformindexhtml"},{"level":3,"title":"handleHotUpdate","slug":"handlehotupdate"},{"level":2,"title":"插件顺序","slug":"plugin-ordering"},{"level":2,"title":"情景应用","slug":"conditional-application"},{"level":2,"title":"Rollup 插件兼容性","slug":"rollup-plugin-compatibility"},{"level":2,"title":"路径规范化","slug":"path-normalization"}],"relativePath":"guide/api-plugin.md","lastUpdated":1627354936988}',t={},o=a('<h1 id="plugin-api"><a class="header-anchor" href="#plugin-api" aria-hidden="true">#</a> 插件 API</h1><p>Vite 插件扩展了设计出色的 Rollup 接口，带有一些 Vite 独有的配置项。因此，你只需要编写一个 Vite 插件，就可以同时为开发环境和生产环境工作。</p><p><strong>推荐在阅读下面的章节之前，首先阅读下 <a href="https://rollupjs.org/guide/en/#plugin-development" target="_blank" rel="noopener noreferrer">Rollup 插件文档</a></strong></p><h2 id="conventions"><a class="header-anchor" href="#conventions" aria-hidden="true">#</a> 约定</h2><p>如果插件不使用 Vite 特有的钩子，可以实现为 <a href="#rollup-plugin-compatibility">兼容的 Rollup 插件</a>，推荐使用 <a href="https://rollupjs.org/guide/en/#conventions" target="_blank" rel="noopener noreferrer">Rollup 插件名称约定</a>。</p><ul><li>Rollup 插件应该有一个带 <code>rollup-plugin-</code> 前缀、语义清晰的名称。</li><li>在 package.json 中包含 <code>rollup-plugin</code> 和 <code>vite-plugin</code> 关键字。</li></ul><p>这样，插件也可以用于纯 Rollup 或基于 WMR 的项目。</p><p>对于 Vite 专属的插件：</p><ul><li>Vite 插件应该有一个带 <code>vite-plugin-</code> 前缀、语义清晰的名称。</li><li>在 package.json 中包含 <code>vite-plugin</code> 关键字。</li><li>在插件文档增加一部分关于为什么本插件是一个 Vite 专属插件的详细说明（如，本插件使用了 Vite 特有的插件钩子）。</li></ul><p>如果你的插件只适用于特定的框架，它的名字应该遵循以下前缀格式：</p><ul><li><code>vite-plugin-vue-</code> 前缀作为 Vue 插件</li><li><code>vite-plugin-react-</code> 前缀作为 React 插件</li><li><code>vite-plugin-svelte-</code> 前缀作为 Svelte 插件</li></ul><h2 id="plugins-config"><a class="header-anchor" href="#plugins-config" aria-hidden="true">#</a> 插件配置</h2><p>用户会将插件添加到项目的 <code>devDependencies</code> 中并使用数组形式的 <code>plugins</code> 选项配置它们。</p><div class="language-js"><pre><code><span class="token comment">// vite.config.js</span>\n<span class="token keyword">import</span> vitePlugin <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-feature&#39;</span>\n<span class="token keyword">import</span> rollupPlugin <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-feature&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vitePlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rollupPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>假值的插件将被忽略，可以用来轻松地启用或停用插件。</p><p><code>plugins</code> 也可以接受将多个插件作为单个元素的预设。这对于使用多个插件实现的复杂特性（如框架集成）很有用。该数组将在内部被扁平化（flatten）。</p><div class="language-js"><pre><code><span class="token comment">// 框架插件</span>\n<span class="token keyword">import</span> frameworkRefresh <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-framework-refresh&#39;</span>\n<span class="token keyword">import</span> frameworkDevtools <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-framework-devtools&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">framework</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token function">frameworkRefresh</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">frameworkDevTools</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">// vite.config.js</span>\n<span class="token keyword">import</span> framework <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-framework&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">framework</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="simple-examples"><a class="header-anchor" href="#simple-examples" aria-hidden="true">#</a> 简单示例</h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>通常的惯例是创建一个 Vite/Rollup 插件作为一个返回实际插件对象的工厂函数。该函数可以接受允许用户自定义插件行为的选项。</p></div><h3 id="importing-a-virtual-file"><a class="header-anchor" href="#importing-a-virtual-file" aria-hidden="true">#</a> 引入一个虚拟文件</h3><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">myPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> virtualFileId <span class="token operator">=</span> <span class="token string">&#39;@my-virtual-file&#39;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;my-plugin&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 必须的，将会在 warning 和 error 中显示</span>\n    <span class="token function">resolveId</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">===</span> virtualFileId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> virtualFileId\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">===</span> virtualFileId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">export const msg = &quot;from virtual file&quot;</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这使得可以在 JavaScript 中引入这些文件：</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> msg <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@my-virtual-file&#39;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>\n</code></pre></div><h3 id="transforming-custom-file-types"><a class="header-anchor" href="#transforming-custom-file-types" aria-hidden="true">#</a> 转换自定义文件类型</h3><div class="language-js"><pre><code><span class="token keyword">const</span> fileRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(my-file-ext)$</span><span class="token regex-delimiter">/</span></span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">myPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;transform-file&#39;</span><span class="token punctuation">,</span>\n\n    <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">src<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>fileRegex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n          code<span class="token operator">:</span> <span class="token function">compileFileToJS</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">,</span>\n          map<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token comment">// 如果可行将提供 source map</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="universal-hooks"><a class="header-anchor" href="#universal-hooks" aria-hidden="true">#</a> 通用钩子</h2><p>在开发中，Vite 开发服务器会创建一个插件容器来调用 <a href="https://rollupjs.org/guide/en/#build-hooks" target="_blank" rel="noopener noreferrer">Rollup 构建钩子</a>，与 Rollup 如出一辙。</p><p>以下钩子在服务器启动时被调用：</p><ul><li><a href="https://rollupjs.org/guide/en/#options" target="_blank" rel="noopener noreferrer"><code>options</code></a></li><li><a href="https://rollupjs.org/guide/en/#buildstart" target="_blank" rel="noopener noreferrer"><code>buildStart</code></a></li></ul><p>以下钩子会在每个传入模块请求时被调用：</p><ul><li><a href="https://rollupjs.org/guide/en/#resolveid" target="_blank" rel="noopener noreferrer"><code>resolveId</code></a></li><li><a href="https://rollupjs.org/guide/en/#load" target="_blank" rel="noopener noreferrer"><code>load</code></a></li><li><a href="https://rollupjs.org/guide/en/#transform" target="_blank" rel="noopener noreferrer"><code>transform</code></a></li></ul><p>以下钩子在服务器关闭时被调用：</p><ul><li><a href="https://rollupjs.org/guide/en/#buildend" target="_blank" rel="noopener noreferrer"><code>buildEnd</code></a></li><li><a href="https://rollupjs.org/guide/en/#closebundle" target="_blank" rel="noopener noreferrer"><code>closeBundle</code></a></li></ul><p>请注意 <a href="https://rollupjs.org/guide/en/#moduleparsed" target="_blank" rel="noopener noreferrer"><code>moduleParsed</code></a> 钩子在开发中是 <strong>不会</strong> 被调用的，因为 Vite 为了性能会避免完整的 AST 解析。</p><p><a href="https://rollupjs.org/guide/en/#output-generation-hooks" target="_blank" rel="noopener noreferrer">Output Generation Hooks</a>（除了 <code>closeBundle</code>) 在开发中是 <strong>不会</strong> 被调用的。你可以认为 Vite 的开发服务器只调用了 <code>rollup.rollup()</code> 而没有调用 <code>bundle.generate()</code>。</p><h2 id="vite-specific-hooks"><a class="header-anchor" href="#vite-specific-hooks" aria-hidden="true">#</a> Vite 独有钩子</h2><p>Vite 插件也可以提供钩子来服务于特定的 Vite 目标。这些钩子会被 Rollup 忽略。</p><h3 id="config"><a class="header-anchor" href="#config" aria-hidden="true">#</a> <code>config</code></h3><ul><li><p><strong>类型：</strong> <code>(config: UserConfig, env: { mode: string, command: string }) =&gt; UserConfig | null | void</code></p></li><li><p><strong>种类：</strong> <code>async</code>, <code>sequential</code></p><p>在解析 Vite 配置前调用。钩子接收原始用户配置（命令行选项指定的会与配置文件合并）和一个描述配置环境的变量，包含正在使用的 <code>mode</code> 和 <code>command</code>。它可以返回一个将被深度合并到现有配置中的部分配置对象，或者直接改变配置（如果默认的合并不能达到预期的结果）。</p><p><strong>示例：</strong></p><div class="language-js"><pre><code><span class="token comment">// 返回部分配置（推荐）</span>\n<span class="token keyword">const</span> <span class="token function-variable function">partialConfigPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;return-partial&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">config</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n      foo<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 直接改变配置（应仅在合并不起作用时使用）</span>\n<span class="token keyword">const</span> <span class="token function-variable function">mutateConfigPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;mutate-config&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">config</span><span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span> <span class="token punctuation">{</span> command <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">===</span> <span class="token string">&#39;build&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      config<span class="token punctuation">.</span>root <span class="token operator">=</span> __dirname\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>用户插件在运行这个钩子之前会被解析，因此在 <code>config</code> 钩子中注入其他插件不会有任何效果。</p></div></li></ul><h3 id="configresolved"><a class="header-anchor" href="#configresolved" aria-hidden="true">#</a> <code>configResolved</code></h3><ul><li><p><strong>类型：</strong> <code>(config: ResolvedConfig) =&gt; void | Promise&lt;void&gt;</code></p></li><li><p><strong>种类：</strong> <code>async</code>, <code>parallel</code></p><p>在解析 Vite 配置后调用。使用这个钩子读取和存储最终解析的配置。当插件需要根据运行的命令做一些不同的事情时，它也很有用。</p><p><strong>示例：</strong></p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">exmaplePlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> config\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;read-config&#39;</span><span class="token punctuation">,</span>\n\n    <span class="token function">configResolved</span><span class="token punctuation">(</span><span class="token parameter">resolvedConfig</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 存储最终解析的配置</span>\n      config <span class="token operator">=</span> resolvedConfig\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// 在其他钩子中使用存储的配置</span>\n    <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>command <span class="token operator">===</span> <span class="token string">&#39;serve&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// serve: 由开发服务器调用的插件</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// build: 由 Rollup 调用的插件</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><h3 id="configureserver"><a class="header-anchor" href="#configureserver" aria-hidden="true">#</a> <code>configureServer</code></h3><ul><li><p><strong>类型：</strong> <code>(server: ViteDevServer) =&gt; (() =&gt; void) | void | Promise&lt;(() =&gt; void) | void&gt;</code></p></li><li><p><strong>种类：</strong> <code>async</code>, <code>sequential</code></p></li><li><p><strong>此外请看</strong> <a href="./api-javascript.html#vitedevserver">ViteDevServer</a></p><p>是用于配置开发服务器的钩子。最常见的用例是在内部 <a href="https://github.com/senchalabs/connect" target="_blank" rel="noopener noreferrer">connect</a> 应用程序中添加自定义中间件:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">myPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;configure-server&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">configureServer</span><span class="token punctuation">(</span><span class="token parameter">server</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    server<span class="token punctuation">.</span>middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 自定义请求处理...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>注入后置中间件</strong></p><p><code>configureServer</code> 钩子将在内部中间件被安装前调用，所以自定义的中间件将会默认会比内部中间件早运行。如果你想注入一个在内部中间件 <strong>之后</strong> 运行的中间件，你可以从 <code>configureServer</code> 返回一个函数，将会在内部中间件安装后被调用：</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">myPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;configure-server&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">configureServer</span><span class="token punctuation">(</span><span class="token parameter">server</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 返回一个在内部中间件安装后</span>\n    <span class="token comment">// 被调用的后置钩子</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      server<span class="token punctuation">.</span>middlewares<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 自定义请求处理...</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>存储服务器访问</strong></p><p>在某些情况下，其他插件钩子可能需要访问开发服务器实例（例如访问 websocket 服务器、文件系统监视程序或模块图）。这个钩子也可以用来存储服务器实例以供其他钩子访问:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">myPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> server\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;configure-server&#39;</span><span class="token punctuation">,</span>\n    <span class="token function">configureServer</span><span class="token punctuation">(</span><span class="token parameter">_server</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      server <span class="token operator">=</span> _server\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>server<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 使用 server...</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>注意 <code>configureServer</code> 在运行生产版本时不会被调用，所以其他钩子需要防范它缺失。</p></li></ul><h3 id="transformindexhtml"><a class="header-anchor" href="#transformindexhtml" aria-hidden="true">#</a> <code>transformIndexHtml</code></h3><ul><li><p><strong>类型：</strong> <code>IndexHtmlTransformHook | { enforce?: &#39;pre&#39; | &#39;post&#39; transform: IndexHtmlTransformHook }</code></p></li><li><p><strong>种类：</strong> <code>async</code>, <code>sequential</code></p><p>转换 <code>index.html</code> 的专用钩子。钩子接收当前的 HTML 字符串和转换上下文。上下文在开发期间暴露<a href="./api-javascript.html#vitedevserver"><code>ViteDevServer</code></a>实例，在构建期间暴露 Rollup 输出的包。</p><p>这个钩子可以是异步的，并且可以返回以下其中之一:</p><ul><li>经过转换的 HTML 字符串</li><li>注入到现有 HTML 中的标签描述符对象数组（<code>{ tag, attrs, children }</code>）。每个标签也可以指定它应该被注入到哪里（默认是在 <code>&lt;head&gt;</code> 之前）</li><li>一个包含 <code>{ html, tags }</code> 的对象</li></ul><p><strong>基础示例：</strong></p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">htmlPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;html-transform&#39;</span><span class="token punctuation">,</span>\n    <span class="token function">transformIndexHtml</span><span class="token punctuation">(</span><span class="token parameter">html</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> html<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>\n        <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;title&gt;(.*?)&lt;\\/title&gt;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;title&gt;Title replaced!&lt;/title&gt;</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><strong>完整钩子签名：</strong></p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">IndexHtmlTransformHook</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n  html<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  ctx<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token builtin">string</span>\n    filename<span class="token operator">:</span> <span class="token builtin">string</span>\n    server<span class="token operator">?</span><span class="token operator">:</span> ViteDevServer\n    bundle<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;rollup&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>OutputBundle\n    chunk<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;rollup&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>OutputChunk\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  <span class="token operator">|</span> IndexHtmlTransformResult\n  <span class="token operator">|</span> <span class="token keyword">void</span>\n  <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IndexHtmlTransformResult <span class="token operator">|</span> <span class="token keyword">void</span><span class="token operator">&gt;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">IndexHtmlTransformResult</span> <span class="token operator">=</span>\n  <span class="token operator">|</span> <span class="token builtin">string</span>\n  <span class="token operator">|</span> HtmlTagDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token operator">|</span> <span class="token punctuation">{</span>\n      html<span class="token operator">:</span> <span class="token builtin">string</span>\n      tags<span class="token operator">:</span> HtmlTagDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">HtmlTagDescriptor</span> <span class="token punctuation">{</span>\n  tag<span class="token operator">:</span> <span class="token builtin">string</span>\n  attrs<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span>\n  children<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> HtmlTagDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token comment">/**\n   * 默认： &#39;head-prepend&#39;\n   */</span>\n  injectTo<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;head&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;body&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;head-prepend&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;body-prepend&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><h3 id="handlehotupdate"><a class="header-anchor" href="#handlehotupdate" aria-hidden="true">#</a> <code>handleHotUpdate</code></h3><ul><li><p><strong>类型：</strong> <code>(ctx: HmrContext) =&gt; Array&lt;ModuleNode&gt; | void | Promise&lt;Array&lt;ModuleNode&gt; | void&gt;</code></p><p>执行自定义 HMR 更新处理。钩子接收一个带有以下签名的上下文对象：</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">HmrContext</span> <span class="token punctuation">{</span>\n  file<span class="token operator">:</span> <span class="token builtin">string</span>\n  timestamp<span class="token operator">:</span> <span class="token builtin">number</span>\n  modules<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>ModuleNode<span class="token operator">&gt;</span>\n  <span class="token function-variable function">read</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n  server<span class="token operator">:</span> ViteDevServer\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li><p><code>modules</code> 是受更改文件影响的模块数组。它是一个数组，因为单个文件可能映射到多个服务模块（例如 Vue 单文件组件）。</p></li><li><p><code>read</code> 这是一个异步读函数，它返回文件的内容。之所以这样做，是因为在某些系统上，文件更改的回调函数可能会在编辑器完成文件更新之前过快地触发，并 <code>fs.readFile</code> 直接会返回空内容。传入的 <code>read</code> 函数规范了这种行为。</p></li></ul><p>钩子可以选择:</p><ul><li><p>过滤和缩小受影响的模块列表，使 HMR 更准确。</p></li><li><p>返回一个空数组，并通过向客户端发送自定义事件来执行完整的自定义 HMR 处理:</p><div class="language-js"><pre><code><span class="token function">handleHotUpdate</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> server <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  server<span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    type<span class="token operator">:</span> <span class="token string">&#39;custom&#39;</span><span class="token punctuation">,</span>\n    event<span class="token operator">:</span> <span class="token string">&#39;special-update&#39;</span><span class="token punctuation">,</span>\n    data<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>客户端代码应该使用 <a href="./api-hmr.html">HMR API</a> 注册相应的处理器（这应该被相同插件的 <code>transform</code> 钩子注入）：</p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;special-update&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 执行自定义更新</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul></li></ul><h2 id="plugin-ordering"><a class="header-anchor" href="#plugin-ordering" aria-hidden="true">#</a> 插件顺序</h2><p>一个 Vite 插件可以额外指定一个 <code>enforce</code> 属性（类似于 webpack 加载器）来调整它的应用顺序。<code>enforce</code> 的值可以是<code>pre</code> 或 <code>post</code>。解析后的插件将按照以下顺序排列：</p><ul><li>Alias</li><li>带有 <code>enforce: &#39;pre&#39;</code> 的用户插件</li><li>Vite 核心插件</li><li>没有 enforce 值的用户插件</li><li>Vite 构建用的插件</li><li>带有 <code>enforce: &#39;post&#39;</code> 的用户插件</li><li>Vite 后置构建插件（最小化，manifest，报告）</li></ul><h2 id="conditional-application"><a class="header-anchor" href="#conditional-application" aria-hidden="true">#</a> 情景应用</h2><p>默认情况下插件在开发（serve）和构建（build）模式中都会调用。如果插件只需要在预览或构建期间有条件地应用，请使用 <code>apply</code> 属性指明它们仅在 <code>&#39;build&#39;</code> 或 <code>&#39;serve&#39;</code> 模式时调用：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">myPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;build-only&#39;</span><span class="token punctuation">,</span>\n    apply<span class="token operator">:</span> <span class="token string">&#39;build&#39;</span> <span class="token comment">// 或 &#39;serve&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="rollup-plugin-compatibility"><a class="header-anchor" href="#rollup-plugin-compatibility" aria-hidden="true">#</a> Rollup 插件兼容性</h2><p>相当数量的 Rollup 插件将直接作为 Vite 插件工作（例如：<code>@rollup/plugin-alias</code> 或 <code>@rollup/plugin-json</code>），但并不是所有的，因为有些插件钩子在非构建式的开发服务器上下文中没有意义。</p><p>一般来说，只要 Rollup 插件符合以下标准，它就应该像 Vite 插件一样工作：</p><ul><li>没有使用 <a href="https://rollupjs.org/guide/en/#moduleparsed" target="_blank" rel="noopener noreferrer"><code>moduleParsed</code></a> 钩子。</li><li>它在打包钩子和输出钩子之间没有很强的耦合。</li></ul><p>如果一个 Rollup 插件只在构建阶段有意义，则在 <code>build.rollupOptions.plugins</code> 下指定即可。</p><p>你也可以用 Vite 独有的属性来扩展现有的 Rollup 插件:</p><div class="language-js"><pre><code><span class="token comment">// vite.config.js</span>\n<span class="token keyword">import</span> example <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-example&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token operator">...</span><span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      enforce<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>\n      apply<span class="token operator">:</span> <span class="token string">&#39;build&#39;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>查看 <a href="https://vite-rollup-plugins.patak.dev" target="_blank" rel="noopener noreferrer">Vite Rollup 插件</a> 获取兼容的官方 Rollup 插件列表及其使用指南。</p><h2 id="path-normalization"><a class="header-anchor" href="#path-normalization" aria-hidden="true">#</a> 路径规范化</h2><p>Vite 对路径进行了规范化处理，在解析路径时使用 POSIX 分隔符（ / ），同时保留了 Windows 中的卷名。而另一方面，Rollup 在默认情况下保持解析的路径不变，因此解析的路径在 Windows 中会使用 win32 分隔符（ \\ ）。然而，Rollup 插件会使用 <code>@rollup/pluginutils</code> 内部的 <a href="https://github.com/rollup/plugins/tree/master/packages/pluginutils#normalizepath" target="_blank" rel="noopener noreferrer"><code>normalizePath</code> 工具函数</a>，它在执行比较之前将分隔符转换为 POSIX。所以意味着当这些插件在 Vite 中使用时，<code>include</code> 和 <code>exclude</code> 两个配置模式，以及与已解析路径比较相似的路径会正常工作。</p><p>所以对于 Vite 插件来说，在将路径与已解析的路径进行比较时，首先规范化路径以使用 POSIX 分隔符是很重要的。从 <code>vite</code> 模块中也导出了一个等效的 <code>normalizePath</code> 工具函数。</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> normalizePath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>\n\n<span class="token function">normalizePath</span><span class="token punctuation">(</span><span class="token string">&#39;foo\\\\bar&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;foo/bar&#39;</span>\n<span class="token function">normalizePath</span><span class="token punctuation">(</span><span class="token string">&#39;foo/bar&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;foo/bar&#39;</span>\n</code></pre></div>',66);t.render=function(a,p,t,e,c,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
