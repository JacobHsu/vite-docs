import{o as n,c as a,a as s}from"./app.66abc2b9.js";const t='{"title":"HMR API","description":"","frontmatter":{"title":"HMR API"},"headers":[{"level":2,"title":"必需的条件守卫","slug":"required-conditional-guard"},{"level":2,"title":"hot.accept(cb)","slug":"hot-acceptcb"},{"level":2,"title":"hot.accept(deps, cb)","slug":"hot-accept-deps-cb"},{"level":2,"title":"hot.dispose(cb)","slug":"hot-dispose-cb"},{"level":2,"title":"hot.data","slug":"hot-data"},{"level":2,"title":"hot.decline()","slug":"hot-decline"},{"level":2,"title":"hot.invalidate()","slug":"hot-invalidate"},{"level":2,"title":"hot.on(event, cb)","slug":"hot-onevent-cb"}],"relativePath":"guide/api-hmr.md","lastUpdated":1627267695098}',p={},o=s('<h1 id="hmr-api"><a class="header-anchor" href="#hmr-api" aria-hidden="true">#</a> HMR API</h1><div class="tip custom-block"><p class="custom-block-title">注意</p><p>这里是客户端 HMR API。若要在插件中处理 HMR 更新，详见 <a href="./api-plugin.html#handlehotupdate">handleHotUpdate</a>。</p><p>手动 HMR API 主要用于框架和工具作者。作为最终用户，HMR 可能已经在特定于框架的启动器模板中为你处理过了。</p></div><p>Vite 通过特殊的 <code>import.<wbr>meta.hot</code> 对象暴露手动 HMR API。</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">ImportMeta</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> hot<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">readonly</span> data<span class="token operator">:</span> <span class="token builtin">any</span>\n\n    <span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n    <span class="token function">accept</span><span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>mod<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n    <span class="token function">accept</span><span class="token punctuation">(</span>dep<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>mod<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n    <span class="token function">accept</span><span class="token punctuation">(</span>deps<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>mods<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n\n    <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n    <span class="token function">decline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n    <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n\n    <span class="token function">on</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="required-conditional-guard"><a class="header-anchor" href="#required-conditional-guard" aria-hidden="true">#</a> 必需的条件守卫</h2><p>首先，请确保用一个条件语句守护所有 HMR API 的使用，这样代码就可以在生产环境中被 tree-shaking 优化：</p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// HMR 代码</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="hot-acceptcb"><a class="header-anchor" href="#hot-acceptcb" aria-hidden="true">#</a> <code>hot.accept(cb)</code></h2><p>要接收模块自身，应使用 <code>import.<wbr>meta.hot.accept</code>，参数为接收已更新模块的回调函数：</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">1</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">newModule</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;updated: count is now &#39;</span><span class="token punctuation">,</span> newModule<span class="token punctuation">.</span>count<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>“接受” 热更新的模块被认为是 <strong>HMR 边界</strong>。</p><p>请注意，Vite 的 HMR 实际上并不替换最初导入的模块：如果 HMR 边界模块从某个依赖重新导出其导入，则它应负责更新这些重新导出的模块（这些导出必须使用 <code>let</code>）。此外，从边界模块向上的导入者将不会收到更新。</p><p>这种简化的 HMR 实现对于大多数开发用例来说已经足够了，同时允许我们跳过生成代理模块的昂贵工作。</p><h2 id="hot-accept-deps-cb"><a class="header-anchor" href="#hot-accept-deps-cb" aria-hidden="true">#</a> <code>hot.accept(deps, cb)</code></h2><p>模块也可以接受直接依赖项的更新，而无需重新加载自身：</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./foo.js&#39;</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">&#39;./foo.js&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newFoo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 回调函数接收到更新后的&#39;./foo.js&#39; 模块</span>\n    newFoo<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 也可以接受一个依赖模块的数组：</span>\n  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>\n    <span class="token punctuation">[</span><span class="token string">&#39;./foo.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./bar.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>newFooModule<span class="token punctuation">,</span> newBarModule<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 回调函数接收一个更新后模块的数组</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="hot-dispose-cb"><a class="header-anchor" href="#hot-dispose-cb" aria-hidden="true">#</a> <code>hot.dispose(cb)</code></h2><p>一个接收自身的模块或一个期望被其他模块接收的模块可以使用 <code>hot.dispose</code> 来清除任何由其更新副本产生的持久副作用：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">setupSideEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token function">setupSideEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 清理副作用</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="hot-data"><a class="header-anchor" href="#hot-data" aria-hidden="true">#</a> <code>hot.data</code></h2><p><code>import.<wbr>meta.hot.data</code> 对象在同一个更新模块的不同实例之间持久化。它可以用于将信息从模块的前一个版本传递到下一个版本。</p><h2 id="hot-decline"><a class="header-anchor" href="#hot-decline" aria-hidden="true">#</a> <code>hot.decline()</code></h2><p>调用 <code>import.<wbr>meta.hot.decline()</code> 表示此模块不可热更新，如果在传播 HMR 更新时遇到此模块，浏览器应该执行完全重新加载。</p><h2 id="hot-invalidate"><a class="header-anchor" href="#hot-invalidate" aria-hidden="true">#</a> <code>hot.invalidate()</code></h2><p>现在调用 <code>import.<wbr>meta.hot.invalidate()</code> 只是重新加载页面。</p><h2 id="hot-onevent-cb"><a class="header-anchor" href="#hot-onevent-cb" aria-hidden="true">#</a> <code>hot.on(event, cb)</code></h2><p>监听自定义 HMR 事件。</p><p>以下 HMR 事件由 Vite 自动触发：</p><ul><li><code>&#39;vite:beforeUpdate&#39;</code> 当更新即将被应用时（例如，一个模块将被替换）</li><li><code>&#39;vite:beforeFullReload&#39;</code> 当完整的重载即将发生时</li><li><code>&#39;vite:beforePrune&#39;</code> 当不再需要的模块即将被剔除时</li><li><code>&#39;vite:error&#39;</code> 当发生错误时（例如，语法错误）</li></ul><p>自定义 HMR 事件可以由插件发送。更多细节详见 <a href="./api-plugin.html#handleHotUpdate">handleHotUpdate</a>。</p>',30);p.render=function(s,t,p,e,c,l){return n(),a("div",null,[o])};export default p;export{t as __pageData};
