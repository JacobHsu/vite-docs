import{o as n,c as s,a}from"./app.a9a86f7e.js";const p='{"title":"JavaScript API","description":"","frontmatter":{"title":"JavaScript API"},"headers":[{"level":2,"title":"createServer","slug":"createserver"},{"level":2,"title":"InlineConfig","slug":"inlineconfig"},{"level":2,"title":"ViteDevServer","slug":"vitedevserver"},{"level":2,"title":"build","slug":"build"},{"level":2,"title":"resolveConfig","slug":"resolveconfig"}],"relativePath":"guide/api-javascript.md","lastUpdated":1632477447533}',t={},o=a('<h1 id="javascript-api"><a class="header-anchor" href="#javascript-api" aria-hidden="true">#</a> JavaScript API</h1><p>Vite 的 JavaScript API 是完全类型化的，我们推荐使用 TypeScript 或者在 VSCode 中启用 JS 类型检查来利用智能提示和类型校验。</p><h2 id="createserver"><a class="header-anchor" href="#createserver" aria-hidden="true">#</a> <code>createServer</code></h2><p><strong>类型签名</strong></p><div class="language-ts"><pre><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createServer</span><span class="token punctuation">(</span>inlineConfig<span class="token operator">?</span><span class="token operator">:</span> InlineConfig<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ViteDevServer<span class="token operator">&gt;</span>\n</code></pre></div><p><strong>使用示例</strong></p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> createServer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;vite&#39;</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// 任何合法的用户配置选项，加上 `mode` 和 `configFile`</span>\n    configFile<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    root<span class="token operator">:</span> __dirname<span class="token punctuation">,</span>\n    server<span class="token operator">:</span> <span class="token punctuation">{</span>\n      port<span class="token operator">:</span> <span class="token number">1337</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">await</span> server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="inlineconfig"><a class="header-anchor" href="#inlineconfig" aria-hidden="true">#</a> <code>InlineConfig</code></h2><p><code>InlineConfig</code> 接口扩展了 <code>UserConfig</code> 并添加了以下属性：</p><ul><li><code>configFile</code>：指明要使用的配置文件。如果没有设置，Vite 将尝试从项目根目录自动解析。设置为 <code>false</code> 可以禁用自动解析功能。</li><li><code>envFile</code>：设置为 <code>false</code> 时，则禁用 <code>.env</code> 文件。</li></ul><h2 id="vitedevserver"><a class="header-anchor" href="#vitedevserver" aria-hidden="true">#</a> <code>ViteDevServer</code></h2><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">ViteDevServer</span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * 被解析的 vite 配置对象\n   */</span>\n  config<span class="token operator">:</span> ResolvedConfig\n  <span class="token comment">/**\n   * 一个 connect 应用实例\n   * - 可以用于将自定义中间件附加到开发服务器。\n   * - 还可以用作自定义http服务器的处理函数。\n      或作为中间件用于任何 connect 风格的 Node.js 框架。\n   *\n   * https://github.com/senchalabs/connect#use-middleware\n   */</span>\n  middlewares<span class="token operator">:</span> Connect<span class="token punctuation">.</span>Server\n  <span class="token comment">/**\n   * 本机 node http 服务器实例\n   */</span>\n  httpServer<span class="token operator">:</span> http<span class="token punctuation">.</span>Server <span class="token operator">|</span> <span class="token keyword">null</span>\n  <span class="token comment">/**\n   * chokidar 监听器实例\n   * https://github.com/paulmillr/chokidar#api\n   */</span>\n  watcher<span class="token operator">:</span> FSWatcher\n  <span class="token comment">/**\n   * web socket 服务器，带有 `send(payload)` 方法。\n   */</span>\n  ws<span class="token operator">:</span> WebSocketServer\n  <span class="token comment">/**\n   * Rollup 插件容器，可以针对给定文件运行插件钩子。\n   */</span>\n  pluginContainer<span class="token operator">:</span> PluginContainer\n  <span class="token comment">/**\n   * 跟踪导入关系、url 到文件映射和 hmr 状态的模块图。\n   */</span>\n  moduleGraph<span class="token operator">:</span> ModuleGraph\n  <span class="token comment">/**\n   * 以代码方式解析、加载和转换 url 并获取结果\n   * 而不需要通过 http 请求管道。\n   */</span>\n  <span class="token function">transformRequest</span><span class="token punctuation">(</span>\n    url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    options<span class="token operator">?</span><span class="token operator">:</span> TransformOptions\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>TransformResult <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * 应用 vite 内建 HTML 转换和任意插件 HTML 转换\n   */</span>\n  <span class="token function">transformIndexHtml</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> html<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * 使用 esbuild 转换一个文件的工具函数\n   * 对某些特定插件十分有用\n   */</span>\n  <span class="token function">transformWithEsbuild</span><span class="token punctuation">(</span>\n    code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    options<span class="token operator">?</span><span class="token operator">:</span> EsbuildTransformOptions<span class="token punctuation">,</span>\n    inMap<span class="token operator">?</span><span class="token operator">:</span> object\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ESBuildTransformResult<span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * 加载一个给定的 URL 作为 SSR 的实例化模块\n   */</span>\n  <span class="token function">ssrLoadModule</span><span class="token punctuation">(</span>\n    url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> isolated<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;&gt;</span>\n  <span class="token comment">/**\n   * 解决 ssr 错误堆栈信息\n   */</span>\n  <span class="token function">ssrFixStacktrace</span><span class="token punctuation">(</span>e<span class="token operator">:</span> Error<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * 启动服务器\n   */</span>\n  <span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> isRestart<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ViteDevServer<span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * 停止服务器\n   */</span>\n  <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="build"><a class="header-anchor" href="#build" aria-hidden="true">#</a> <code>build</code></h2><p><strong>类型校验</strong></p><div class="language-ts"><pre><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span>\n  inlineConfig<span class="token operator">?</span><span class="token operator">:</span> InlineConfig\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>RollupOutput <span class="token operator">|</span> RollupOutput<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n</code></pre></div><p><strong>使用示例</strong></p><div class="language-js"><pre><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> build <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;vite&#39;</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">await</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    root<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./project&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    build<span class="token operator">:</span> <span class="token punctuation">{</span>\n      base<span class="token operator">:</span> <span class="token string">&#39;/foo/&#39;</span><span class="token punctuation">,</span>\n      rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="resolveconfig"><a class="header-anchor" href="#resolveconfig" aria-hidden="true">#</a> <code>resolveConfig</code></h2><p><strong>类型校验</strong></p><div class="language-ts"><pre><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">resolveConfig</span><span class="token punctuation">(</span>\n  inlineConfig<span class="token operator">:</span> InlineConfig<span class="token punctuation">,</span>\n  command<span class="token operator">:</span> <span class="token string">&#39;build&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;serve&#39;</span><span class="token punctuation">,</span>\n  defaultMode<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ResolvedConfig<span class="token operator">&gt;</span>\n</code></pre></div>',20);t.render=function(a,p,t,e,c,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
