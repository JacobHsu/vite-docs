import{o as n,c as s,a}from"./app.a2203fca.js";const t='{"title":"后端集成","description":"","frontmatter":{"title":"后端集成"},"headers":[],"relativePath":"guide/backend-integration.md","lastUpdated":1627281282081}',p={},o=a('<h1 id="backend-integration"><a class="header-anchor" href="#backend-integration" aria-hidden="true">#</a> 后端集成</h1><p>如果你想使用传统的后端（如 Rails, Laravel）来服务 HTML，但使用 Vite 来服务其他资源，可以查看在 <a href="https://github.com/vitejs/awesome-vite#integrations-with-backends" target="_blank" rel="noopener noreferrer">Awesome Vite</a> 上的已有的后端集成列表。</p><p>或者你可以按照如下步骤手动配置：</p><ol><li><p>在你的 Vite 配置中配置入口文件和启用创建 <code>manifest</code>：</p><div class="language-js"><pre><code><span class="token comment">// vite.config.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  build<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 在 outDir 中生成 manifest.json</span>\n    manifest<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 覆盖默认的 .html 入口</span>\n      input<span class="token operator">:</span> <span class="token string">&#39;/path/to/main.js&#39;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>如果你使用了 <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-legacy" target="_blank" rel="noopener noreferrer"><code>@vitejs/plugin-legacy</code></a> 插件或者手动开启 <a href="/config/#build-polyfilldynamicimport"><code>build.dynamicImportPolyfill</code> 选项</a>，请记得将 <a href="/config/#build-polyfilldynamicimport">dynamic import polyfill</a> 添加到入口处，因为它并不会被自动注入：</p><div class="language-js"><pre><code><span class="token comment">// 添加到你应用入口文件的开头</span>\n<span class="token keyword">import</span> <span class="token string">&#39;vite/dynamic-import-polyfill&#39;</span>\n</code></pre></div></li><li><p>在开发环境中，在服务器的 HTML 模板中注入以下内容（用正在运行的本地 URL 替换 <code>http://localhost:3000</code>）：</p><div class="language-html"><pre><code><span class="token comment">&lt;!-- 如果是在开发环境中 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://localhost:3000/@vite/client<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://localhost:3000/main.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>还要确保服务器配置为提供 Vite 工作目录中的静态资源，否则图片等资源将无法正确加载。</p><p>如果你正使用 <code>@vitejs/plugin-react-refresh</code> 配合 React，你还需要在上述脚本前添加下面这个，因为插件不能修改你正在服务的 HTML：</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> RefreshRuntime <span class="token keyword">from</span> <span class="token string">&#39;http://localhost:3000/@react-refresh&#39;</span>\n  RefreshRuntime<span class="token punctuation">.</span><span class="token function">injectIntoGlobalHook</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span>\n  window<span class="token punctuation">.</span><span class="token function-variable function">$RefreshReg$</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  window<span class="token punctuation">.</span><span class="token function-variable function">$RefreshSig$</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> type\n  window<span class="token punctuation">.</span>__vite_plugin_react_preamble_installed__ <span class="token operator">=</span> <span class="token boolean">true</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div></li><li><p>在生产环境中：在运行 <code>vite build</code> 之后，一个 <code>manifest.json</code> 文件将与静态资源文件一同生成。一个示例清单文件会像下面这样：</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;main.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/main.4889e940.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;src&quot;</span><span class="token operator">:</span> <span class="token string">&quot;main.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;isEntry&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;dynamicImports&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;views/foo.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;css&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;assets/main.b82dbe22.css&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;assets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;assets/asset.0ab0f9cd.png&quot;</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;views/foo.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/foo.869aea0d.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;src&quot;</span><span class="token operator">:</span> <span class="token string">&quot;views/foo.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;isDynamicEntry&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;imports&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;_shared.83069a53.js&quot;</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;_shared.83069a53.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/shared.83069a53.js&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>清单是一个 <code>Record&lt;name, chunk&gt;</code> 结构的对象。</li><li>对于 入口 或动态入口 chunk，键是相对于项目根目录的资源路径。</li><li>对于非入口 chunk，键是生成文件的名称并加上前缀 <code>_</code>。</li><li>Chunk 将信息包含在其静态和动态导入上（两者都是映射到清单中相应 chunk 的键)，以及任何与之相关的 CSS 和资源文件。</li></ul><p>你可以使用这个文件来渲染链接或者用散列文件名预加载指令（注意：这里的语法只是为了解释，实际使用时请你的服务器模板语言代替）：</p><div class="language-html"><pre><code><span class="token comment">&lt;!-- 如果是在生产环境中 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/assets/{{ manifest[<span class="token punctuation">&#39;</span>main.js<span class="token punctuation">&#39;</span>].css }}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/assets/{{ manifest[<span class="token punctuation">&#39;</span>main.js<span class="token punctuation">&#39;</span>].file }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div></li></ol>',4);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
